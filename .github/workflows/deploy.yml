name: Deploy FastAPI to AWS Lambda

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: fastapi-lambda-api
  STACK_NAME: fastapi-lambda-stack
  FUNCTION_NAME: FastApiLambdaFunction

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::412420079063:role/GitHubActionsOIDCRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Delete existing CloudFormation stack (if exists)
        run: |
          set +e
          echo "Checking for existing stack: $STACK_NAME"
          aws cloudformation describe-stacks --stack-name $STACK_NAME > /dev/null 2>&1
          if [ $? -eq 0 ]; then
            echo "Deleting existing stack: $STACK_NAME"
            aws cloudformation delete-stack --stack-name $STACK_NAME
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
            echo "Stack deleted."
            sleep 10
          else
            echo "No existing stack found."
          fi
          set -e

      - name: Log in to Amazon ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build, Tag and Push Docker image to ECR
        id: build_image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest
          echo "ðŸ”§ Docker image URI: $IMAGE_URI"
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $IMAGE_URI
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Deploy to CloudFormation
        run: |
          echo "ðŸš€ Deploying with image: ${{ steps.build_image.outputs.image_uri }}"
          aws cloudformation deploy \
            --template-file infra/cloudformation.yaml \
            --stack-name $STACK_NAME \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              LambdaFunctionName=$FUNCTION_NAME \
              ECRImageUri=${{ steps.build_image.outputs.image_uri }}
